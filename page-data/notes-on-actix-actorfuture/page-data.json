{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes-on-actix-actorfuture","result":{"data":{"brainNote":{"slug":"notes-on-actix-actorfuture","title":"Notes on Actix ActorFuture","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Notes on Actix ActorFuture\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust, #actix, #actor-model\"), mdx(\"p\", null, \"First, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix/0.10.0-alpha.3/actix/fut/trait.ActorFuture.html\"\n  }), \"ActorFuture\"), \" is Actix's version of future, it's not the traditional futures.\"), mdx(\"p\", null, \"We run the ActorFuture by calling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wait\"), \" method of its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \". This method will block the message stream, to prevent any further messages being processed until the current Message is finished processing.\"), mdx(\"p\", null, \"I stumped upon a case where I need to send multiple messages in sequence, this kind of task can be done by using a normal future:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"let fut = async move {\\n    Server::from_registry().send(MessageA{}).await?;\\n    Server::from_registry().send(MessageB{}).await\\n};\\n\")), mdx(\"p\", null, \"And then, convert the future into ActorFuture (because we need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wait\"), \" method), by doing either:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"let run = fut.into_actor(self);\\n\")), mdx(\"p\", null, \"Or\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"let run = actix::fut::wrap_future::<_, Self>(fut);\\n\")), mdx(\"p\", null, \"After that, we can consume the ActorFuture just like how we do it for single message cases:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"run.map(|result, actor, context} { ... }).wait(ctx);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"How to create a SystemService in Actix","slug":"how-to-create-a-systemservice-in-actix","childMdx":{"excerpt":"#rust, #actix, #actor-model In  Actix Framework , an actor can be registered as a service, which help it run automatically. There are two…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"notes-on-actix-actorfuture"}},"staticQueryHashes":[]}