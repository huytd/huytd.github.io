{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/parser-combinator","result":{"data":{"brainNote":{"slug":"parser-combinator","title":"Parser Combinator","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Parser Combinator\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#parser #compiler\"), mdx(\"p\", null, \"Parser combinator is the method that use the principles of functional programming to compose the primitive parsers into a larger ones.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"./images/parser-combinator.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"To demo how is the composing works, let's build a parser that accepts either a digit or a letter.\"), mdx(\"p\", null, \"We can starts by building primitive parsers for digits and letter:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// primitive parser\\nconst digit = (c) => !isNaN(+c) && +c >= 0 && +c <= 9;\\nconst letter = (c) => c.match(/[a-zA-Z]/) !== null;\\n\")), mdx(\"p\", null, \"The combinator we need to use is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OR\"), \" logic:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// combinator\\nconst or = (left, right) => c => left(c) || right(c);\\n\")), mdx(\"p\", null, \"Finally, combine them together:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"// combined parser\\nconst isDigitOrLetter = or(digit, letter);\\n\")), mdx(\"p\", null, \"It's important to note that, the above example is not the way a parser actually works, as it's lack of the mechanism to handle error, and the way to traversal to next chunk of input.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Markdown parser using Nom","slug":"markdown-parser-using-nom","childMdx":{"excerpt":"#rust #nom #parser Source:  https://github.com/HGHimself/prose/blob/master/src/markdown.rs This is a source code of a Markdown  Parser…"}},{"title":"Nom Parser","slug":"nom-parser","childMdx":{"excerpt":"#rust #parser #nom Nom is a parser library written by VLC developers to help them speed ups and improve the reliable of their media file…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"parser-combinator"}},"staticQueryHashes":[]}