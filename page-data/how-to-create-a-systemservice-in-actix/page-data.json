{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/how-to-create-a-systemservice-in-actix","result":{"data":{"brainNote":{"slug":"how-to-create-a-systemservice-in-actix","title":"How to create a SystemService in Actix","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create a SystemService in Actix\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust, #actix, #actor-model\"), mdx(\"p\", null, \"In \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/actix-framework\"\n  }), \"Actix Framework\"), \", an actor can be registered as a service, which help it run automatically. There are two types of service, ArbiterService, which is unique per arbiter, and SystemService, which is unique per system.\"), mdx(\"p\", null, \"In this note, we gonna focus on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix/0.10.0-alpha.3/src/actix/registry.rs.html#233-266\"\n  }), \"SystemService\"), \".\"), mdx(\"p\", null, \"An actor that want to be a service, need to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Default\"), \" trait, and of course, it must be an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actor\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"#[derive(Default)]\\nstruct ServerService;\\n\\nimpl Actor for ServerService {\\n    type Context = Context<Self>;\\n}\\n\")), mdx(\"p\", null, \"Then, we implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SystemService\"), \" trait, also, we need to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Supervised\"), \" trait to make sure this service will be automatically restart on failure.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"impl SystemService for ServerService {}\\nimpl Supervised for ServerService {}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"Whenever we need to access the service, we can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from_registry()\"), \" method, the usage is something like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"ServerService::from_registry()\\n    .send(SomeMessage{})\\n\")), mdx(\"p\", null, \"The return type of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"from_registry()\"), \" is an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Addr\"), \". For more details about how to handle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"send\"), \" messages, see \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/notes-on-actix-actorfuture\"\n  }), \"Notes on Actix ActorFuture\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"Actix Framework","slug":"actix-framework","childMdx":{"excerpt":"Tags: #rust #actor-model Actix Framework is a Rust actor framework that help you build application using  Actor Model . The Actix eco system…"}},{"title":"Notes on Actix ActorFuture","slug":"notes-on-actix-actorfuture","childMdx":{"excerpt":"#rust, #actix, #actor-model First,  ActorFuture  is Actix's version of future, it's not the traditional futures. We run the ActorFuture by…"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"how-to-create-a-systemservice-in-actix"}},"staticQueryHashes":[]}