{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/tree-drawing-algorithm","result":{"data":{"brainNote":{"slug":"tree-drawing-algorithm","title":"Tree Drawing Algorithm","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Tree Drawing Algorithm\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#algorithm #graphics #wip\"), mdx(\"p\", null, \"Read:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://poincare.matf.bg.ac.rs/~tijana/geometrija/seminarski/tree_drawing.pdf\"\n  }), \"Tidy Drawings of Trees\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://cs.brown.edu/people/rtamassi/gdhandbook/chapters/trees.pdf\"\n  }), \"Tree Drawing Algorithms\"))), mdx(\"p\", null, \"Notes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tree drawing is an interesting and very complex task on the computer and there are many techniques, algorithms to do it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To draw a tree diagram, it's pretty simple, we first need to \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"positioning\"), \" all the nodes and then, connect them all.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"But \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"positioning\"), \" itself is a very complex problem, since it bounds to many other constraints, one of them is the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"physical limit\"), \" of the drawing surface (screen size,...).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Another problem is, nodes usually being labelled, and the positioning algorithm must also consider these label to make sure they're not overlaped, and the edges must avoid nodes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Aesthetics\"), \" is also an important properties of every diagram, some main properties are:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Area\"), \": the algorithm must be able to draw as much nodes as possible on a limited area.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Aspect Ratio\"), \": the ratio between width and height of the whole diagram, of course. The \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"optimal\"), \" aspect ratio would be 1. That mean, the diagram should not be too wide or too tall but balanced.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Subtree Separation\"), \": any two node-disjoint subtrees should have their bounding rectangle not overlap with each other.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Distance between root and leaves\"), \": it might related to area and other properties.\")))), mdx(\"p\", null, \"(To be continued)\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've beenâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"tree-drawing-algorithm"}},"staticQueryHashes":[]}