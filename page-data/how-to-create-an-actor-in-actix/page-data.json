{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/how-to-create-an-actor-in-actix","result":{"data":{"brainNote":{"slug":"how-to-create-an-actor-in-actix","title":"How to create an Actor in Actix","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create an Actor in Actix\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust, #actix, #actor-model\"), mdx(\"p\", null, \"To create an Actor in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/actix-framework\"\n  }), \"Actix Framework\"), \") we first create a struct, then implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actor\"), \" trait for it. An actor has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Context\"), \", is where it run, and we can control the life cycle of it via the context.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"struct MyActor;\\n\\nimpl Actor for MyActor {\\n    type Context = Context<Self>;\\n}\\n\")), mdx(\"p\", null, \"The lifecycle of an actor includes these states: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Started\"), \" -> \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Running\"), \" -> \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Stopping\"), \" -> \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Stopped\"), \". You can work with one of the lifecycle in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actor\"), \" implementation like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"impl Actor for MyActor {\\n    type Context = Context<Self>;\\n\\n    fn started(&mut self, ctx: &mut Context<Self>) {\\n        ...\\n    }\\n}\\n\")), mdx(\"p\", null, \"Actors communicate with each other by exchanging messages, every message is a typed structure that implmement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Message\"), \" trait, and has a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rtype\"), \" to define its expected response type.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"#[derive(Message)]\\n#[rtype(result = \\\"i32\\\")]\\nstruct AddNumber(i32);\\n\")), mdx(\"p\", null, \"If you want your actor to be able to handle a certain message, implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Handler\"), \" trait with that message. The implementation must describe the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Result\"), \" type, this is the return type that the message is expected.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"impl Handler<AddNumber> for MyActor {\\n    type Result = i32;\\n\\n    fn handle(&mut self, msg: AddNumber, ctx: &mut Self::Context) -> Self::Result {\\n        ...\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"Actix Framework","slug":"actix-framework","childMdx":{"excerpt":"Tags: #rust #actor-model Actix Framework is a Rust actor framework that help you build application using  Actor Model . The Actix eco system…"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"how-to-create-an-actor-in-actix"}},"staticQueryHashes":[]}