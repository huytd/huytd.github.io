{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/how-to-create-a-websocket-actor-in-actix","result":{"data":{"brainNote":{"slug":"how-to-create-a-websocket-actor-in-actix","title":"How to create a Websocket Actor in Actix","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to create a Websocket Actor in Actix\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust, #actix, #actor-model, #websocket\"), mdx(\"p\", null, \"To handle WebSocket in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/actix-framework\"\n  }), \"Actix Framework\"), \" you need to create a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix-web-actors/3.0.0-alpha.1/actix_web_actors/ws/index.html\"\n  }), \"WebSocket Actor\"), \". Each actor will be responsible for each connected client.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"#[derive(Default)]\\nstruct WsSession;\\n\")), mdx(\"p\", null, \"A WebSocket actor have a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WebsocketContext\"), \" and need to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StreamHandler\"), \" trait.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rust\"\n  }), \"impl Actor for WsSession {\\n    type Context = ws::WebsocketContext<Self>;\\n}\\n\\ntype WebsocketMessage = Result<ws::Message, ws::ProtocolError>;\\n\\nimpl StreamHandler<WebsocketMessage> for WsSession {\\n    fn handle(&mut self, msg: WebsocketMessage, ctx: &mut Self::Context) {\\n        ...\\n  }\\n}\\n\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix-web-actors/3.0.0-alpha.1/actix_web_actors/ws/struct.WebsocketContext.html\"\n  }), \"WebsocketContext\"), \" is an Actix Context that has some special features such as handling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"text\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"binary\"), \" messages, handling \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ping\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pong\"), \" messages.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handle\"), \" method of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix/0.10.0-alpha.3/actix/prelude/trait.StreamHandler.html\"\n  }), \"StreamHandler\"), \" trait is where we process the incoming messages from the client. A \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.rs/actix/0.10.0-alpha.3/actix/prelude/trait.StreamHandler.html\"\n  }), \"ws::Message\"), \" (not to be mistaken with Actor's messages) could be anything in Text or Binary or Ping/Pong.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"Actix Framework","slug":"actix-framework","childMdx":{"excerpt":"Tags: #rust #actor-model Actix Framework is a Rust actor framework that help you build application using  Actor Model . The Actix ecosystem…"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"how-to-create-a-websocket-actor-in-actix"}},"staticQueryHashes":[]}