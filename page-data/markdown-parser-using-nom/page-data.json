{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/markdown-parser-using-nom","result":{"data":{"brainNote":{"slug":"markdown-parser-using-nom","title":"Markdown parser using Nom","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Markdown parser using Nom\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust #nom #parser\"), mdx(\"p\", null, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/HGHimself/prose/blob/master/src/markdown.rs\"\n  }), \"https://github.com/HGHimself/prose/blob/master/src/markdown.rs\")), mdx(\"p\", null, \"This is a source code of a Markdown \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/parser\"\n  }), \"Parser\"), \" written in Rust and uses \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/nom-parser\"\n  }), \"Nom Parser\"), \". It's very clear and easy to read. And it's a very good place to start when you want to get the idea of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/parser-combination\"\n  }), \"Parser Combination\"), \".\"), mdx(\"p\", null, \"Apparently I was looking for something that could convert a string into some other data structure, but it doesn't matter.\"), mdx(\"p\", null, \"Here's how it work:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First, write some primitive parser, for things like bold, italic, links \\u2014 these are called inline markdown\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fn parse_bold_text(input: &str) -> Result<&str, &str> {\\n    delimited(tag(\\\"**\\\"), is_not(\\\"**\\\"), tag(\\\"**\\\"))(i)\\n}\\n\\nfn parse_link(input: &str) -> Result<&str, (&str, &str)> {\\n    pair(\\n        delimited(tag(\\\"[\\\"), is_not(\\\"]\\\"), tag(\\\"]\\\")),\\n        delimited(tag(\\\"(\\\"), is_not(\\\")\\\"), tag(\\\")\\\")),\\n    )(i)\\n}\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Then, combine them all into a larger block, we can map the result into another data structure. For example, the following map the parsed result into a MarkdownInline struct.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fn parse_inline_markdown(i: &str) -> Result<&str, MarkdownInline> {\\n    alt((\\n        map(parse_bold_text, |s: &str| MarkdownInline::Bold(s)),\\n        map(parse_link, |(text, url): (&str, &str)| MarkdownInline::Link(text, url)),\\n    ))(i)\\n}\\n\")), mdx(\"p\", null, \"The key thing when working with parser combination, is to form the combination (or relation) between the primitives.\"), mdx(\"p\", null, \"For example, a Header should be a combination of # tags and markdown text elements. A paragraph should be a combination of many inline and markdown text.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! This is my personal notebook. You can take a look at some of the recent articles here: Actix Framework Actor Model Bare Metal…"}}],"outboundReferenceNotes":[{"title":"Parser","slug":"parser","childMdx":{"excerpt":"#parser #compiler Read more:  Parsing - Wikipedia"}},{"title":"Nom Parser","slug":"nom-parser","childMdx":{"excerpt":"#rust #parser #nom Nom is a parser library written by VLC developers to help them speed ups and improve the reliable of their media file…"}},{"title":"Parser Combination","slug":"parser-combination","childMdx":{"excerpt":"#parser #compiler"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"markdown-parser-using-nom"}},"staticQueryHashes":[]}