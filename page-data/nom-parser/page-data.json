{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/nom-parser","result":{"data":{"brainNote":{"slug":"nom-parser","title":"Nom Parser","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Nom Parser\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust #parser #nom\"), mdx(\"p\", null, \"Nom is a parser library written by VLC developers to help them speed ups and improve the reliable of their media file parser.\"), mdx(\"p\", null, \"It use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/parser-combinator\"\n  }), \"Parser Combinator\"), \" technique.\"), mdx(\"p\", null, \"Read more: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Geal/nom\"\n  }), \"GitHub - Geal/nom: Rust parser combinator framework\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Markdown parser using Nom","slug":"markdown-parser-using-nom","childMdx":{"excerpt":"#rust #nom #parser Source:  https://github.com/HGHimself/prose/blob/master/src/markdown.rs This is a source code of a Markdown  Parser…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"Parser Combinator","slug":"parser-combinator","childMdx":{"excerpt":"#parser #compiler Parser combinator is the method that use the principles of functional programming to compose the primitive parsers into a…"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"nom-parser"}},"staticQueryHashes":[]}