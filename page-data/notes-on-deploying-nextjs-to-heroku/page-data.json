{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/notes-on-deploying-nextjs-to-heroku","result":{"data":{"brainNote":{"slug":"notes-on-deploying-nextjs-to-heroku","title":"Notes on Deploying Next.js to Heroku","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Notes on Deploying Next.js to Heroku\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#deployment #heroku #javascript\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nextjs.org\"\n  }), \"Next.js\"), \" is a great solution for writing React SSR applications, when it comes to deploying, there's something that worth noted.\"), mdx(\"h2\", null, \"Heroku\"), mdx(\"p\", null, \"By default, a Next.js application will be started at port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":3000\"), \", and we usually have this config in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" even for deploying:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"scripts\\\": {\\n   ...\\n   \\\"start\\\": \\\"next start\\\"\\n}\\n\")), mdx(\"p\", null, \"On Heroku, we don't know which port is assigned for the application, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$PORT\"), \" environment variable instead. So, for deployment, you'll need to let Next.js know this as well with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-p\"), \" parameter, if not, the app will still running at port \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":3000\"), \" and will be unaccessible.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"scripts\\\": {\\n   ...\\n   \\\"start\\\": \\\"next start -p $PORT\\\"\\n}\\n\")), mdx(\"h2\", null, \"Next.js Config\"), mdx(\"p\", null, \"Another thing that need to be noticed during deployment is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"next.config.js\"), \" file.\"), mdx(\"p\", null, \"For some people, they don't care about the need of checking for production environment in this file, it's actually has some problem with it. For example, you have this config when you want to do add some extra logic to the build process, mostly during development:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// next.config.js\\nconst withTypescript = require(\\\"@zeit/next-typescript\\\")\\nconst ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\\n\\nmodule.exports = withTypescript({\\n  webpack(config, options) {\\n    // Add type checking for TS\\n    if (options.isServer) config.plugins.push(new ForkTsCheckerWebpackPlugin())\\n    \\n    return config\\n  }\\n})\\n\")), mdx(\"p\", null, \"With this config, you'll just doing fine in development environment, but on production server, you'll run into problems. One of the problems is, there's no Webpack, so the config will be failed to initialize, and your application will failed to start.\"), mdx(\"p\", null, \"To fix this problem, we'll need to check for production environment and skip the extra development logic:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { PHASE_PRODUCTION_SERVER } =\\n      process.env.NODE_ENV === 'development'\\n      ? {}\\n      : !process.env.NOW_REGION\\n      ? require('next/constants')\\n      : require('next-server/constants');\\n\\nmodule.exports = (phase, { defaultConfig }) => {\\n    if (phase === PHASE_PRODUCTION_SERVER) {\\n        // Skip development logic on production\\n        return {};\\n    }\\n    // Development logic\\n    const withTypescript = require('@zeit/next-typescript');\\n    const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');\\n    return withTypescript({\\n        webpack(config, options) {\\n            if (options.isServer) config.plugins.push(new ForkTsCheckerWebpackPlugin());\\n            return config;\\n        }\\n    });\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've beenâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"notes-on-deploying-nextjs-to-heroku"}},"staticQueryHashes":[]}