{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/emacs-for-note-taking","result":{"data":{"brainNote":{"slug":"emacs-for-note-taking","title":"Emacs for note-taking","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Emacs for note-taking\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#note-taking #editor\"), mdx(\"p\", null, \"Previously, I use an editor called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://obsidian.md\"\n  }), \"Obsidian\"), \" to\\nmaintain this notes site. Now I'm moving back to Emacs.\"), mdx(\"p\", null, \"Obsidian still a very good editor that has a lot of great features and it is\\nvery easy to maintain links between the notes files, there are a lot\\nof things that doesn't fit my note-taking habit, also, it's lack of\\nscripting ability.\"), mdx(\"p\", null, \"Some noteworthy thing, for example, is you cannot paste an image from\\na clipboard with a customized name in Obsidian, or you cannot\\nintegrate it with a grammar checker, ...\"), mdx(\"p\", null, \"Emacs, on the other hand, is a very old but powerful editor that let\\nyou customize everything, and when you find something you're not happy\\nwith, what you will do is, just write a small snippet to make it work\\nthe way you want.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"images/emacs-deft.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"This note will walkthrough some part of my setup to let me replace\\nObsidian with Emacs for daily note-taking, with some improvements.\"), mdx(\"h2\", null, \"Manage and search documents\"), mdx(\"p\", null, \"This actually came from my original setup,\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://jblevins.org/projects/deft/\"\n  }), \"deft\"), \" is an Emacs mode that let\\nyou quickly browsing, filtering and editing your notes. It works with\\nevery plain text documents.\"), mdx(\"p\", null, \"The movement to Obsidian makes me converting all my notes from\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org-mode\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"markdown\"), \" format, I don't feel like I want to move\\nback to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"org-mode\"), \" anytime soon, the main reason is, this Gatsby site\\nstill also use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"markdown\"), \" format, so let's stick with it.\"), mdx(\"p\", null, \"We can config \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"deft\"), \" to only search for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"markdown\"), \" files with\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deft-default-extension\"), \" option.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \";; Deft Package\\n(use-package deft\\n  :ensure t\\n  :config\\n  (setq deft-directory \\\"~/notes\\\"\\n        deft-recursive t\\n        deft-default-extension \\\"md\\\"\\n        deft-text-mode 'org-mode\\n        deft-use-filename-as-title t\\n        deft-use-filter-string-for-filename t)\\n  (global-set-key (kbd \\\"C-c d\\\") 'deft))\\n\")), mdx(\"h2\", null, \"Links between notes\"), mdx(\"p\", null, \"Emacs's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"markdown-mode\"), \" also supports\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.m.wikipedia.org/wiki/Help:Link\"\n  }), \"wikilink\"), \", but by default,\\nit converts all the space characters to a dash \\\"-\\\", we can force it to\\nuse space.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(setq markdown-enable-wiki-links t)\\n(setq markdown-link-space-sub-char \\\" \\\")\\n\")), mdx(\"p\", null, \"To open a link while editing markdown files, use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"C-c C-o\"), \".\"), mdx(\"p\", null, \"To insert a wikilink to any exists note, and follow Obsidian's format\\nat the same time (link with file name only, without the extension), I\\nwrote a small function to help me quickly pickup the file from a list\\nand insert it to the document between the double squared brackets.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \";; Insert file names to current buffer\\n(defun insert-file-name-as-wikilink (filename &optional args)\\n  (interactive \\\"*fInsert file name: \\\\nP\\\")\\n  (insert (concat \\\"[[\\\" (file-name-sans-extension (file-relative-name\\n  filename)) \\\"]]\\\")))\\n  \\n(define-key markdown-mode-map (kbd \\\"C-c i\\\") 'insert-file-name-as-wikilink)\\n\")), mdx(\"h2\", null, \"Paste image from clipboard\"), mdx(\"p\", null, \"Obsidian has the ability to paste an image directly from the\\nclipboard, and it inserts a link to that image to the document, but you\\ncannot change the file name of the pasted image right in the\\neditor. In Emacs, we can fix this.\"), mdx(\"p\", null, \"First, we need to have a way to save an image from clipboard to disk,\\nI used a small bash script for this:\"), mdx(\"p\", null, \"Create a script file at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"/usr/local/bin/pasteimage\"), \" with the\\nfollowing content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/env bash\\nfolder=$(pwd)\\nfilename=$(date +%Y-%m-%d\\\\ at\\\\ %H.%M.%S).png\\n\\nif [ $# -ne 0 ]; then\\n    if [ -d $1 ](/-d-1); then\\n        if [ \\\"$1\\\" != \\\".\\\" ]; then folder=$1; fi\\n    else\\n        a=$(dirname \\\"$1\\\")    \\n        b=$(basename \\\"$1\\\" )\\n\\n        if [ \\\"$b\\\" != \\\"\\\" ]; then filename=$b; fi\\n\\n        if [ \\\"$a\\\" != \\\".\\\" ]; then folder=$a; fi\\n    fi\\nfi\\n\\nosascript -e \\\"tell application \\\\\\\"System Events\\\\\\\" to \\xAC\\n        write (the clipboard as \\xABclass PNGf\\xBB) to \\xAC\\n        (make new file at folder \\\\\\\"$folder\\\\\\\" \\xAC\\n        with properties {name:\\\\\\\"$filename\\\\\\\"})\\\"\\n\")), mdx(\"p\", null, \"When we have an image in clipboard, we can use this script to save it\\nto disk by calling:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pasteimage <path-to-saved-image>\\n\")), mdx(\"p\", null, \"Now, we can call it programmatically in Emacs with this function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \";; Insert image in clipboard to markdown\\n(defun insert-clipboard-image-to-buffer (filename &optional args)\\n  (interactive \\\"*fSave image to: \\\\nP\\\")\\n  (shell-command (concat \\\"pasteimage \\\" filename))\\n  (insert (concat \\\"![](\\\" (file-relative-name filename) \\\")\\\")))\\n \\n(define-key markdown-mode-map (kbd \\\"C-c u\\\") 'insert-clipboard-image-to-buffer)\\n\")), mdx(\"h2\", null, \"Rename a note and all the backlinks\"), mdx(\"p\", null, \"One of Obsidian's notable ability is you can rename a note file and\\nhave all the backlinks to that note in other files updated\\nautomatically.\"), mdx(\"p\", null, \"It's a bit complicated to do that in Emacs and string replacing in\\nElisp is not really efficient, so I'm gonna do that in JavaScript and\\ncall that script in Emacs. The idea of this script is:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"1. For each markdown files in the current working folder\\n2. Check if we have the link to the old name of the note\\n3. If we do, replace it with the new link\\n4. Save that file if modification made\\n\")), mdx(\"p\", null, \"In Emacs, I write a function called\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rename-current-file-and-backlinks\"), \" to rename the file, the buffer and\\nrun the backlink update script:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \";; Rename current file and all its backlinks\\n(defun rename-current-file-and-backlinks (new-name &optional args)\\n  (interactive \\\"*fEnter new file name: \\\\nP\\\")\\n  (let ((original-link-name (file-name-sans-extension (file-relative-name buffer-file-name)))\\n        (new-link-name (file-name-sans-extension (file-relative-name new-name)))\\n        (filename (buffer-file-name)))\\n  (progn\\n    ;; Rename buffer and file name\\n    (rename-file filename new-name 1)\\n    (rename-buffer new-name)\\n    (set-visited-file-name new-name)\\n    (set-buffer-modified-p nil)\\n    ;; Relink all notes\\n    (shell-command (concat \\\"note-relink\\\" \\\" \\\" \\\"--from=\\\" original-link-name \\\" \\\" \\\"--to=\\\" new-link-name))\\n    ;; Replace current file title\\n    (save-restriction\\n      (goto-char (point-min))\\n      (while (search-forward (concat \\\"title: \\\" original-link-name) nil t)\\n        (replace-match (concat \\\"title: \\\" new-link-name)))))))\\n\\n(define-key markdown-mode-map (kbd \\\"C-c r\\\") 'rename-current-file-and-backlinks)\\n\")), mdx(\"hr\", null), mdx(\"p\", null, \"This setup still lack of some features from Obsidian, such as the graph\\nview, which I barely used. But it's good enough to do the job, I guess\\nI'm gonna stick with Emacs for a while more.\"), mdx(\"p\", null, \"Maybe sometimes in the future, I'll write the whole things in Elisp,\\nbut let's save it for future.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"How I built this notebook","slug":"how-i-built-this-notebook","childMdx":{"excerpt":"You may notice that this site is heavily inspired by\n Andy Matuschak's notes ,\nif the navigation confused you, you should take a look at…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"-d-1","slug":"-d-1","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"emacs-for-note-taking"}},"staticQueryHashes":[]}