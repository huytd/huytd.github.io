{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/generate-graphql-resolver-dynamically","result":{"data":{"brainNote":{"slug":"generate-graphql-resolver-dynamically","title":"Generate GraphQL resolvers dynamically from Schema","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Generate GraphQL resolvers dynamically from Schema\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For a GraphQL API to work, you need:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Schema of the data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resolvers\")), mdx(\"p\", null, \"Schema is very easy to generate dynamically, there are a lot of tools\\nto do so, for example \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://walmartlabs.github.io/json-to-simple-graphql-schema/\"\n  }), \"Wamart's JSON to GraphQL generator\")), mdx(\"p\", null, \"It's trickier to generate resolvers dynamically, but once you know the\\nstructure of the data, it become doable.\"), mdx(\"p\", null, \"One approach is, iterate thru the structure of the data, for each\\nfield, create a function that takes it's field name or path and search on the\\nactual data source for the relevant information.\"), mdx(\"p\", null, \"Refer: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/marmelab/json-graphql-server/blob/93fe4edcd768f4fefcea6b33e5eec5af6c9233d0/src/resolver/index.js\"\n  }), \"JSON GraphQL Server\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've beenâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"generate-graphql-resolver-dynamically"}},"staticQueryHashes":[]}