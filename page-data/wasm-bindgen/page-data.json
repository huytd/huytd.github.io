{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/wasm-bindgen","result":{"data":{"brainNote":{"slug":"wasm-bindgen","title":"wasm-bindgen","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"wasm-bindgen\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#rust #webassembly #javascript \"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rustwasm/wasm-bindgen\"\n  }), \"wasm-bindgen\"), \" is an awesome tool made by \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"rustwasm\"), \" team, make it very easy to expose Rust's data/functions to JavaScript and vice versa.\"), mdx(\"p\", null, \"To use, you can add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#[wasm_bindgen]\"), \" as an annotation the code where you want to be exposed or import to/from JavaScript, for example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen]\\nextern \\\"C\\\" {\\n    fn alert(s: &str);\\n}\\n\\n#[wasm_bindgen]\\npub fn greet(name: &str) {\\n    alert(&format!(\\\"Hello, {}!\\\", name));\\n}\\n\")), mdx(\"p\", null, \"With the above code, we import the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alert()\"), \" function from JavaScript to Rust, and expose Rust's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"greet()\"), \" function to JavaScript.\"), mdx(\"p\", null, \"A Rust struct will be exposed as a class in JavaScript:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen]\\npub struct Foo {\\n    contents: u32,\\n}\\n\\n#[wasm_bindgen]\\nimpl Foo {\\n    #[wasm_bindgen(constructor)]\\n    pub fn new() -> Foo {\\n        Foo { contents: 0 }\\n    }\\n}\\n\")), mdx(\"p\", null, \"You can import an ES6 module to use in Rust:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen(module = \\\"./bar\\\")]\\nextern \\\"C\\\" {\\n    fn blah(bleh: &JsValue);\\n}\\n// blah() function is in bar.js\\n\")), mdx(\"p\", null, \"There are two attributes you need to know about, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js_namespace\"), \": indicates the JavaScript type for your binding, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js_name\"), \" for the function name. We can use them to import multiple signatures of a polymorphic JavaScript function, like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen]\\nextern \\\"C\\\" {\\n    #[wasm_bindgen(js_namespace = console, js_name = log)]\\n    fn log_str(s: &str);\\n    #[wasm_bindgen(js_namespace = console, js_name = log)]\\n    fn log_u32(n: u32);\\n}\\n\")), mdx(\"p\", null, \"Using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js_name\"), \", you can rename not just function, but also classes or types, for example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen]\\nextern \\\"C\\\" {\\n    // Import JavaScript's String type as JsString in Rust\\n    #[wasm_bindgen(js_name = String)]\\n    type JsString;\\n}\\n\")), mdx(\"p\", null, \"And if you're renaming type names, you need to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"js_class\"), \" attribute when binding a function of that type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#[wasm_bindgen(method, js_class = \\\"String\\\", js_name = charAt)]\\nfn char_at(this: &JsString, index: u32) -> JsString;\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"web_sys\"), \" crate also provides some good binding from JS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"use web_sys::console;\\nconsole::log_1(&\\\"Hello using web-sys\\\".into());\\n\")), mdx(\"p\", null, \"Finnaly, use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rustwasm/wasm-pack\"\n  }), \"wasm-pack\"), \" to build your Rust project into a WebAssembly module, then use it in your JavaScript project.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"wasm-pack build\\n\")), mdx(\"p\", null, \"If you're using TypeScript or NodeJS, you might want to take a look at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"wasm-bindgen\"), \" command line tool \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rustwasm.github.io/wasm-bindgen/reference/cli.html\"\n  }), \"https://rustwasm.github.io/wasm-bindgen/reference/cli.html\")), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Bonus:\"), \" If you're working with various data type/struct, it's very helpful to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"serde\"), \" for serializing/deserializing into and from JS. See more at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rustwasm.github.io/wasm-bindgen/reference/arbitrary-data-with-serde.html\"\n  }), \"https://rustwasm.github.io/wasm-bindgen/reference/arbitrary-data-with-serde.html\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Compile Rust to WebAssembly","slug":"compile-rust-to-webassembly","childMdx":{"excerpt":"#rust #webassembly A Rust program can be compiled to WebAssembly as a library or a full runnable entry point (if the project type is binary…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"wasm-bindgen"}},"staticQueryHashes":[]}