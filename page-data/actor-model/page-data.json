{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/actor-model","result":{"data":{"brainNote":{"slug":"actor-model","title":"Actor Model","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Actor Model\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#actor-model #concurrency #system-design #engineering\"), mdx(\"p\", null, \"Actor Model is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/concurrent-computational-model\"\n  }), \"concurrent computational model\"), \" where every unit is considered as an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"actor\"), \", each actor can send and receives messages to and from each other actors, and it do some computation based on the messages it received, or create even more actors.\"), mdx(\"p\", null, \"An actor has its own private state and do things on that state, and they don't share their states with each other.\"), mdx(\"p\", null, \"Read more: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.m.wikipedia.org/wiki/Actor_model\"\n  }), \"Actor model - Wikipedia\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Actix Framework","slug":"actix-framework","childMdx":{"excerpt":"Tags: #rust #actor-model Actix Framework is a Rust actor framework that help you build application using  Actor Model . The Actix eco system…"}},{"title":"about","slug":"about","childMdx":{"excerpt":"yarn run v1.17.3 $ node indexer.js title: Home Page Welcome! This is my personal notebook. You can take a look at some of the recent…"}}],"outboundReferenceNotes":[{"title":"concurrent-computational-model","slug":"concurrent-computational-model","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"actor-model"}},"staticQueryHashes":[]}