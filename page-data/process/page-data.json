{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/process","result":{"data":{"brainNote":{"slug":"process","title":"Process","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Process\",\n  \"aliases\": [\"process\", \"processes\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#os #system-design #engineering\"), mdx(\"p\", null, \"Process is the unit of work in a computer system, it's managed by the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/operating-system-notes\"\n  }), \"Operating System\"), \".\"), mdx(\"h2\", null, \"Anatomy of a Process\"), mdx(\"p\", null, \"It's a much wider concept than a program, we can say program is part\\nof a process. A process includes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The current value of Program Counter (PC)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Contents of the processors registers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Value of the variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Process Stack (SP) which contains temporary data such as subroutine\\nparameters, return address, temporary variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A data section that contains global variables\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"images/process-memory-layout.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"A child process will inherit all the resources from its parent\\nprocess, and it will copy all memories of the parent.\"), mdx(\"p\", null, \"In multiprogramming environment, the CPU switch back and forth between\\nprocesses, and it has to save and load all of the process's\\ninformation in the progress, this is called \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"context switch\"), \".\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"images/cpu-mutiprocess-execution.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", null, \"Process Control Block\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"images/process-control-block.png\",\n    \"alt\": null\n  }))), mdx(\"p\", null, \"A process is represented by a data structure called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Process Control\\nBlock\"), \" (PCB) or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Process Descriptor\"), \", it contains the following\\ninformations:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The current state of the process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The unique ID of the process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pointer to its parent process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pointers to its child processes if exists\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The priority of the process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The pointers to locate memory of processes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The register save area\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The processor its running on\")), mdx(\"h2\", null, \"States of a Process\"), mdx(\"p\", null, \"There are 5 main states of a process, but there are also many\\ntransistion states in between, the following diagram show every\\npossible states and their transistions.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"images/states-of-a-process.png\",\n    \"alt\": null\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"New\"), \": When the OS put the program to the main memory, a new\\nprocess created.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Ready\"), \": After that, it will immediately put into Ready state, in\\nwhich, it waits for the CPU to be assigned. It can also be put back\\nto Ready state and stay in secondary memory due to lack of resources.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Running\"), \": Once the \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/process-scheduler\"\n  }), \"process scheduler\"), \" picked up a process, CPU will\\nbe assigned and the execution begin. The number of processes being\\nexecuted at the same time depends on the number of CPUs available in\\nthe system.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Blocked\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Waiting\"), \": Depends on the scheduler or the instrinsic\\nbehavior of the process, like, when it need to wait for certain\\nresource, or for the input from user, it can be send to Block or\\nWait state. CPU will be assigned to other processes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Completion\"), \" or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Termination\"), \": This is when the process finished\\nits execution, all context (PCB) of the process will be deleted.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Suspend Ready\"), \": If the main memory is full and a higher priority\\nprocess comes for the execution, the OS will have to make room for\\nthat process, so lower processes will be throw to secondary memory\\nand put to this state until main memory is available.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Suspend Wait\"), \": Processes that are blocking due to waiting for\\nother resources will be put in this state until main memory become\\navailable and their wait is finished.\")), mdx(\"h2\", null, \"Process Termination\"), mdx(\"p\", null, \"A process terminates when it finished its execution or being forced to\\ntermination. When this happen, its resources will be returned to the\\nsystem, and its PCB will be erased and return to the free memory pool.\"), mdx(\"p\", null, \"There are some termination reasons:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Normal Exit\"), \": The process terminates when it finished its\\nexecution, and call the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"exit()\"), \" \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/system-call\"\n  }), \"system call\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Abnormal Termination\"), \": When one of the following errors happen:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Error Exit\"), \" (voluntary): When error happen and the process\\nhandle it by exit (like calling \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"panic!()\"), \" in Rust).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Fatal Error\"), \" (involuntary): Error happen that caused the\\nprogram to abort.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Killed by signal\"), \": These signals are either sent by the parent\\nprocess or the user.\")))), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"wait()\"), \" system call returns the ID of a terminated child process,\\nso the parent can tell which and when the child process has been\\nterminated.\"), mdx(\"card\", null, mdx(\"h3\", null, \"Termination Signals\"), mdx(\"p\", null, \"The program must be aware of and know how to handle these termination\\nsignals for various resons.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SIGTERM\"), \": This signal can be blocked, handled or ignored, and\\nthis is the polite way to ask a program to terminate. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill\"), \" command\\nuse this signal.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SIGINT\"), \": \\\"program interrupt\\\" signal is sent when the user types\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"INTR\"), \" character (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ctrl + C\"), \").\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SIGQUIT\"), \": Similar to SIGINT, except it's the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"QUIT\"), \" character\\n(_Ctrl + \", \"_\", \"), this will produces a core dump when it terminate the\\nprocess, like an error signal.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If a program creates temporary files or something, it should not be\\ndeleted when handling this signal, so the user can examine them\\nafterwards.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SIGKILL\"), \": This cause immediate termination, it cannot be handled\\nor ignored, therefore always fatal. This is what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"kill -9\"), \" does. One\\nshould not use SIGKILL before trying other methods like SIGTERM or\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Ctrl + C\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SIGHUP\"), \": This to report that the user's terminal is disconencted.\")))), mdx(\"card\", null, mdx(\"h3\", null, \"Don't kill the parent process\"), mdx(\"p\", null, \"If the parent process terminates, the child processes will become a\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zombie\"), \" onced it terminated. Why?\"), mdx(\"p\", null, \"When a process is terminated, the OS release most of its resources and\\ninformation, but still keep some data and the termination status,\\nbecause the parent process might be interested in these.\"), mdx(\"p\", null, \"When a child process is terminated, parent process will receives a\\nSIGCHLD signal, so it will be able to collect these data (done via\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"wait()\"), \" syscall). When this collection is done, the operating system\\nrelease those last bits of information, and remove the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pid\"), \" from the\\nprocess table. If the parent process is failed to do so, the system\\nhas to keep these data in the process table indefinitely.\"), mdx(\"p\", null, \"Terminated process whose data has not been collected is called\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"zombie\"), \" process.\"), mdx(\"p\", null, \"So, best practices is, program that spawn child processes must handle\\nit properly to prevent the formation of zombies from its child processes.\"), mdx(\"p\", null, \"Read more:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.m.wikipedia.org/wiki/Zombie_process\"\n  }), \"Zombie process - Wikipedia\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.m.wikipedia.org/wiki/Orphan_process\"\n  }), \"Orphan process - Wikipedia\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Operating System Notes","slug":"operating-system-notes","childMdx":{"excerpt":"#os #system-design #engineering Components of an Operating System Not all systems are the same, but most will have these components: Process…"}},{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've been…"}}],"outboundReferenceNotes":[{"title":"Operating System Notes","slug":"operating-system-notes","childMdx":{"excerpt":"#os #system-design #engineering Components of an Operating System Not all systems are the same, but most will have these components: Process…"}},{"title":"process-scheduler","slug":"process-scheduler","childMdx":{"excerpt":""}},{"title":"System Call","slug":"system-call","childMdx":{"excerpt":"#os #system-design #engineering"}}]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"process"}},"staticQueryHashes":[]}