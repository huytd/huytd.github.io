{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/fuzzy-testing","result":{"data":{"brainNote":{"slug":"fuzzy-testing","title":"Fuzzy Testing","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fuzzy Testing\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#testing #engineering\"), mdx(\"p\", null, \"Fuzz Testing is a testing method that instead of writing test cases with a predefined mock data, you generate the test data dynamically and randomly to test if some property or invariant of the test unit is true.\"), mdx(\"p\", null, \"For example, you want to test a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reverse\"), \" function, which take a list and return the reversed copy of that list.\"), mdx(\"p\", null, \"To test this with random data, we see that if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reverse\"), \" works properly and returns a reversed copy of its input, so if we feed that result into the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"reverse\"), \" function again, we should get the original list. So the test should be:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(defun test_reverse (list)\\n  (= list (reverse (reverse (list)))))\\n\")), mdx(\"p\", null, \"By doing this, we see the few aspects of a fuzz test:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We don't have to write test data by hand: We can generate them dynamically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easier to find edge cases: Since we're generating test data, we can easily test a very large amount of data so it's easier to spot the edge cases\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Shrinking: this is a feature of a fuzz tester, whenever a test is failed, the shrinker will try to shrink the test data as small as possible to see the problem better. See more at \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://package.elm-lang.org/packages/elm-community/shrink/latest/\"\n  }), \"elm-community/shrink\"), \".\")), mdx(\"p\", null, \"Apparently I am seeing this as a variant of Table Driven Test with the test table generated automatically, of course table driven test don't have shrinking feature.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! This is my personal notebook. You can take a look at some of the recent articles here: Actix Framework Actor Model Atomic Designâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"fuzzy-testing"}},"staticQueryHashes":[]}