{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/algorithm-partition-a-number-to-sum-of-smaller-ones","result":{"data":{"brainNote":{"slug":"algorithm-partition-a-number-to-sum-of-smaller-ones","title":"Algorithm - Partition a number to sum of smaller ones","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Algorithm - Partition a number to sum of smaller ones\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"#algorithm \"), mdx(\"h2\", null, \"Generator method\"), mdx(\"p\", null, \"The array \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\"), \" is to keep track of all possible integers we can find, the array \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"t\"), \" is to keep the sum \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"t\", \"[i]\"), \" of every \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\"), \" number from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\", \"[1]\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\", \"[i]\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const n = 8;\\nlet x = [1];\\nlet t = [0];\\n\\nconst gen = (i) => {\\n    for (let j = x[i - 1]; j <= ~~((n - t[i - 1]) / 2); j++) {\\n        x[i] = j;\\n        t[i] = t[i - 1] + j;\\n        gen(i + 1);\\n    }\\n    x[i] = n - t[i - 1];\\n    debug(x.slice(1, i+1));\\n};\\n\\ngen(1);\\n\")), mdx(\"h2\", null, \"Generator with Backtracking\"), mdx(\"p\", null, \"Try every possible number from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"1\"), \" to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\"), \", push them to an array \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\"), \" then check if it can sum up to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\"), \" or not.\"), mdx(\"p\", null, \"If it's not, pop it out from the array \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"x\"), \" and try a different one.\"), mdx(\"p\", null, \"To make sure we don't have duplicate cases, we only select the result\\narray that are sorted.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"const n = 8;\\nlet x = [];\\nlet count = 0;\\n\\nconst sum = x => x.reduce((t, i) => t + i, 0);\\n\\nconst isSorted = (x) => {\\n    let clone = x.map(i => i);\\n    clone.sort((a,b) => a - b);\\n    for (let i = 0; i < x.length; i++) {\\n        if (x[i] !== clone[i]) return false;\\n    }\\n    return true;\\n};\\n\\nconst gen = i => {\\n    for (let j = 1; j <= n; j++) {\\n        x[i] = j;\\n        if (sum(x) === n) {\\n            if (isSorted(x)) {\\n                debug(x);\\n            }\\n            break;\\n        }\\n        if (i < n) {\\n            gen(i + 1);\\n        }\\n        x.pop();\\n    }\\n};\\n\\ngen(0);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Home Page","slug":"about","childMdx":{"excerpt":"Welcome! Look like you've found my personal notebook. This is the place where you can take a peek into my mind to see what I've beenâ€¦"}}],"outboundReferenceNotes":[]},"site":{"siteMetadata":{"title":"Huy's Notes"}}},"pageContext":{"slug":"algorithm-partition-a-number-to-sum-of-smaller-ones"}},"staticQueryHashes":[]}